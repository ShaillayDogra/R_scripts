

#install.packages("cluster")
#install.packages("clusterSim")
#install.packages("ade4")

rm(list=ls(all=TRUE))



library(cluster)
library(clusterSim)
library(ade4)



setwd("D:/NESTLE-EPIGEN/MICRIBIOTA/MAY-DATA/NESTLE-V456/TAXA/5_GENUS/ENTEROTYPES")



# data=read.table("Genus-QCed-D3-relative-percent-v2.txt", header=T, row.names=1, dec=".", sep="\t")
# data=read.table("Genus-QCed-W3-relative-percent-v2.txt", header=T, row.names=1, dec=".", sep="\t")
# data=read.table("Genus-QCed-M3-relative-percent-v2.txt", header=T, row.names=1, dec=".", sep="\t")
# data=read.table("Genus-QCed-M6-relative-percent-v2.txt", header=T, row.names=1, dec=".", sep="\t")


head(data)



#######
####### Jensen-Shannon Distance (JSD)
#######

dist.JSD <- function(inMatrix, pseudocount=0.000001, ...) {
	KLD <- function(x,y) sum(x *log(x/y))
	JSD<- function(x,y) sqrt(0.5 * KLD(x, (x+y)/2) + 0.5 * KLD(y, (x+y)/2))
	matrixColSize <- length(colnames(inMatrix))
	matrixRowSize <- length(rownames(inMatrix))
	colnames <- colnames(inMatrix)
	resultsMatrix <- matrix(0, matrixColSize, matrixColSize)
        
  inMatrix = apply(inMatrix,1:2,function(x) ifelse (x==0,pseudocount,x))

	for(i in 1:matrixColSize) {
		for(j in 1:matrixColSize) { 
			resultsMatrix[i,j]=JSD(as.vector(inMatrix[,i]),
			as.vector(inMatrix[,j]))
		}
	}
	colnames -> colnames(resultsMatrix) -> rownames(resultsMatrix)
	as.dist(resultsMatrix)->resultsMatrix
	attr(resultsMatrix, "method") <- "dist"
	return(resultsMatrix) 
 }
#######
#######
#######



data.dist=dist.JSD(data)



#######
####### Partitioning Around Medoids (PAM)
#######
pam.clustering=function(x,k) { # x is a distance matrix and k the number of clusters
                         require(cluster)
                         cluster = as.vector(pam(as.dist(x), k, diss=TRUE)$clustering)
                         return(cluster)
                        }
#######
#######
#######



data.cluster=pam.clustering(data.dist, k=3)



require(clusterSim)
nclusters = index.G1(t(data), data.cluster, d = data.dist, centrotypes = "medoids")



###
### SELECT n=? clusters
###
nclusters=NULL

for (k in 1:20) { 
	if (k==1) {
		nclusters[k]=NA 
	} else {
		data.cluster_temp=pam.clustering(data.dist, k)
		nclusters[k]=index.G1(t(data),data.cluster_temp,  d = data.dist,
		centrotypes = "medoids")
	}
}

plot(nclusters, type="h", xlab="k clusters", ylab="CH index")

###
###
###



### CHANGE k here!!!
data.cluster=pam.clustering(data.dist, k=2)


obs.silhouette=mean(silhouette(data.cluster, data.dist)[,3])
cat(obs.silhouette)


######
###### NOISE removal
######
 noise.removal <- function(dataframe, percent=0.01, top=NULL){
	dataframe->Matrix
	bigones <- rowSums(Matrix)*100/(sum(rowSums(Matrix))) > percent 
	Matrix_1 <- Matrix[bigones,]
	print(percent)
	return(Matrix_1)
 }
######
######
######


data=noise.removal(data, percent=0.01)

### BCA
obs.pca=dudi.pca(data.frame(t(data)), scannf=F, nf=3)
obs.bet=bca(obs.pca, fac=as.factor(data.cluster), scannf=F, nf=k-1) 
s.class(obs.bet$ls, fac=as.factor(data.cluster), grid=F)

s.class(obs.bet$ls, fac=as.factor(data.cluster), grid=F, cell=0, cstar=0, col=c(4,2,3))



### PCOA
obs.pcoa=dudi.pco(data.dist, scannf=F, nf=3)
s.class(obs.pcoa$li, fac=as.factor(data.cluster), grid=F)

s.class(obs.pcoa$li, fac=as.factor(data.cluster), grid=F, cell=0, cstar=0, col=c(3,2,4))


out <- obs.pcoa$l1

# write.table(out, "enterotypeD3.txt", sep="\t", row.names = T, col.names=T)
# write.table(out, "enterotypeW3.txt", sep="\t", row.names = T, col.names=T)
# write.table(out, "enterotypeM3.txt", sep="\t", row.names = T, col.names=T)
# write.table(out, "enterotypeM6.txt", sep="\t", row.names = T, col.names=T)







